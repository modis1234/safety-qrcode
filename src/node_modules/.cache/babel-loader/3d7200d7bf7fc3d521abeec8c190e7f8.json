{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\safety-qrcode\\\\src\\\\bridgesContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext } from 'react';\nimport axios from 'axios'; // UsersContext 에서 사용 할 기본 상태\n\nconst initialState = {\n  users: {\n    loading: false,\n    data: null,\n    error: null\n  },\n  user: {\n    loading: false,\n    data: null,\n    error: null\n  }\n}; // 로딩중일 때 바뀔 상태 객체\n\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n}; // 성공했을 때의 상태 만들어주는 함수\n\nconst success = data => ({\n  loading: false,\n  data,\n  error: null\n}); // 실패했을 때의 상태 만들어주는 함수\n\n\nconst error = error => ({\n  loading: false,\n  data: null,\n  error: error\n}); // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n\n\nfunction usersReducer(state, action) {\n  switch (action.type) {\n    case 'GET_USERS':\n      return { ...state,\n        users: loadingState\n      };\n\n    case 'GET_USERS_SUCCESS':\n      return { ...state,\n        users: success(action.data)\n      };\n\n    case 'GET_USERS_ERROR':\n      return { ...state,\n        users: error(action.error)\n      };\n\n    case 'GET_USER':\n      return { ...state,\n        user: loadingState\n      };\n\n    case 'GET_USER_SUCCESS':\n      return { ...state,\n        user: success(action.data)\n      };\n\n    case 'GET_USER_ERROR':\n      return { ...state,\n        user: error(action.error)\n      };\n\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n} // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n\n\nconst UsersStateContext = /*#__PURE__*/createContext(null);\nconst UsersDispatchContext = /*#__PURE__*/createContext(null); // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n\nexport function UsersProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(usersReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(UsersStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(UsersDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n} // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n\n_s(UsersProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = UsersProvider;\nexport function useUsersState() {\n  _s2();\n\n  const state = useContext(UsersStateContext);\n\n  if (!state) {\n    throw new Error('Cannot find UsersProvider');\n  }\n\n  return state;\n} // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n\n_s2(useUsersState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useUsersDispatch() {\n  _s3();\n\n  const dispatch = useContext(UsersDispatchContext);\n\n  if (!dispatch) {\n    throw new Error('Cannot find UsersProvider');\n  }\n\n  return dispatch;\n}\n\n_s3(useUsersDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport async function getUsers(dispatch) {\n  dispatch({\n    type: 'GET_USERS'\n  });\n\n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n    dispatch({\n      type: 'GET_USERS_SUCCESS',\n      data: response.data\n    });\n  } catch (e) {\n    dispatch({\n      type: 'GET_USERS_ERROR',\n      error: e\n    });\n  }\n}\nexport async function getUser(dispatch, id) {\n  dispatch({\n    type: 'GET_USER'\n  });\n\n  try {\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n    dispatch({\n      type: 'GET_USER_SUCCESS',\n      data: response.data\n    });\n  } catch (e) {\n    dispatch({\n      type: 'GET_USER_ERROR',\n      error: e\n    });\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersProvider\");","map":{"version":3,"sources":["D:/dev/safety-qrcode/src/bridgesContext.js"],"names":["React","createContext","useReducer","useContext","axios","initialState","users","loading","data","error","user","loadingState","success","usersReducer","state","action","type","Error","UsersStateContext","UsersDispatchContext","UsersProvider","children","dispatch","useUsersState","useUsersDispatch","getUsers","response","get","e","getUser","id"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\n// UsersContext 에서 사용 할 기본 상태\r\nconst initialState = {\r\n  users: {\r\n    loading: false,\r\n    data: null,\r\n    error: null\r\n  },\r\n  user: {\r\n    loading: false,\r\n    data: null,\r\n    error: null\r\n  }\r\n};\r\n\r\n// 로딩중일 때 바뀔 상태 객체\r\nconst loadingState = {\r\n  loading: true,\r\n  data: null,\r\n  error: null\r\n};\r\n\r\n// 성공했을 때의 상태 만들어주는 함수\r\nconst success = data => ({\r\n  loading: false,\r\n  data,\r\n  error: null\r\n});\r\n\r\n// 실패했을 때의 상태 만들어주는 함수\r\nconst error = error => ({\r\n  loading: false,\r\n  data: null,\r\n  error: error\r\n});\r\n\r\n// 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\r\nfunction usersReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'GET_USERS':\r\n      return {\r\n        ...state,\r\n        users: loadingState\r\n      };\r\n    case 'GET_USERS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        users: success(action.data)\r\n      };\r\n    case 'GET_USERS_ERROR':\r\n      return {\r\n        ...state,\r\n        users: error(action.error)\r\n      };\r\n    case 'GET_USER':\r\n      return {\r\n        ...state,\r\n        user: loadingState\r\n      };\r\n    case 'GET_USER_SUCCESS':\r\n      return {\r\n        ...state,\r\n        user: success(action.data)\r\n      };\r\n    case 'GET_USER_ERROR':\r\n      return {\r\n        ...state,\r\n        user: error(action.error)\r\n      };\r\n    default:\r\n      throw new Error(`Unhanded action type: ${action.type}`);\r\n  }\r\n}\r\n\r\n// State 용 Context 와 Dispatch 용 Context 따로 만들어주기\r\nconst UsersStateContext = createContext(null);\r\nconst UsersDispatchContext = createContext(null);\r\n\r\n// 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\r\nexport function UsersProvider({ children }) {\r\n  const [state, dispatch] = useReducer(usersReducer, initialState);\r\n\r\n  return (\r\n    <UsersStateContext.Provider value={state}>\r\n      <UsersDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </UsersDispatchContext.Provider>\r\n    </UsersStateContext.Provider>\r\n  );\r\n}\r\n\r\n// State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\r\nexport function useUsersState() {\r\n  const state = useContext(UsersStateContext);\r\n  if (!state) {\r\n    throw new Error('Cannot find UsersProvider');\r\n  }\r\n  return state;\r\n}\r\n\r\n// Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\r\nexport function useUsersDispatch() {\r\n  const dispatch = useContext(UsersDispatchContext);\r\n  if (!dispatch) {\r\n    throw new Error('Cannot find UsersProvider');\r\n  }\r\n  return dispatch;\r\n}\r\n\r\nexport async function getUsers(dispatch) {\r\n  dispatch({ type: 'GET_USERS' });\r\n  try {\r\n    const response = await axios.get(\r\n      'https://jsonplaceholder.typicode.com/users'\r\n    );\r\n    dispatch({ type: 'GET_USERS_SUCCESS', data: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: 'GET_USERS_ERROR', error: e });\r\n  }\r\n}\r\n\r\nexport async function getUser(dispatch, id) {\r\n  dispatch({ type: 'GET_USER' });\r\n  try {\r\n    const response = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n    dispatch({ type: 'GET_USER_SUCCESS', data: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: 'GET_USER_ERROR', error: e });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}