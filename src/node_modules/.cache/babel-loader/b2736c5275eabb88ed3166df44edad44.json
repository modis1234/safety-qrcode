{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\safety-qrcode\\\\src\\\\component\\\\Bridges.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Bridge from './Bridge';\nimport { useBridgesState, useBridgesDispatch, getBridges, postBridge } from '../context/BridgesContext';\n\nfunction Bridges() {\n  _s();\n\n  const [bridgeId, setBridgeId] = useState(null);\n  const state = useBridgesState();\n  const dispatch = useBridgesDispatch();\n  const {\n    data: bridges,\n    loading,\n    error\n  } = state.bridges;\n\n  const fetchData = () => {\n    getBridges(dispatch);\n  };\n\n  const postData = () => {\n    postBridge(dispatch);\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 21\n  }, this);\n  if (!bridges) return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: fetchData,\n    children: \"\\uBD88\\uB7EC\\uC624\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: bridges.map(bridge => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setBridgeId(bridge.id),\n        style: {\n          cursor: 'pointer'\n        },\n        children: [bridge.bridge_nm, \" (\", bridge.bridge_index, \")\"]\n      }, bridge.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"\\uB2E4\\uC2DC \\uBD88\\uB7EC\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: postData,\n      children: \"\\uC785\\uB825\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), bridgeId && /*#__PURE__*/_jsxDEV(Bridge, {\n      id: bridgeId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Bridges, \"Fe9sCsmQr1xvmK+X+JVHoruMpYs=\", false, function () {\n  return [useBridgesState, useBridgesDispatch];\n});\n\n_c = Bridges;\nexport default Bridges;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bridges\");","map":{"version":3,"sources":["D:/dev/safety-qrcode/src/component/Bridges.js"],"names":["React","useState","Bridge","useBridgesState","useBridgesDispatch","getBridges","postBridge","Bridges","bridgeId","setBridgeId","state","dispatch","data","bridges","loading","error","fetchData","postData","map","bridge","id","cursor","bridge_nm","bridge_index"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,UAA9C,EAA0DC,UAA1D,QAA4E,2BAA5E;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMS,KAAK,GAAGP,eAAe,EAA7B;AACA,QAAMQ,QAAQ,GAAGP,kBAAkB,EAAnC;AAEA,QAAM;AAAEQ,IAAAA,IAAI,EAAEC,OAAR;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAoCL,KAAK,CAACG,OAAhD;;AACA,QAAMG,SAAS,GAAG,MAAM;AACtBX,IAAAA,UAAU,CAACM,QAAD,CAAV;AACD,GAFD;;AAIA,QAAMM,QAAQ,GAAG,MAAK;AACpBX,IAAAA,UAAU,CAACK,QAAD,CAAV;AACD,GAFD;;AAIA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACF,OAAL,EAAc,oBAAO;AAAQ,IAAA,OAAO,EAAEG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGd,sBACE;AAAA,4BACE;AAAA,gBACGH,OAAO,CAACK,GAAR,CAAYC,MAAM,iBACjB;AAEE,QAAA,OAAO,EAAE,MAAMV,WAAW,CAACU,MAAM,CAACC,EAAR,CAF5B;AAGE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAHT;AAAA,mBAKGF,MAAM,CAACG,SALV,QAKuBH,MAAM,CAACI,YAL9B;AAAA,SACOJ,MAAM,CAACC,EADd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAQ,MAAA,OAAO,EAAEJ,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAQ,MAAA,OAAO,EAAEC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,EAeGT,QAAQ,iBAAI,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAEA;AAAZ;AAAA;AAAA;AAAA;AAAA,YAff;AAAA,kBADF;AAmBD;;GAtCQD,O;UAEOJ,e,EACGC,kB;;;KAHVG,O;AAwCT,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport Bridge from './Bridge';\r\nimport { useBridgesState, useBridgesDispatch, getBridges, postBridge } from '../context/BridgesContext';\r\n\r\nfunction Bridges() {\r\n  const [bridgeId, setBridgeId] = useState(null);\r\n  const state = useBridgesState();\r\n  const dispatch = useBridgesDispatch();\r\n\r\n  const { data: bridges, loading, error } = state.bridges;\r\n  const fetchData = () => {\r\n    getBridges(dispatch);\r\n  };\r\n\r\n  const postData = () =>{\r\n    postBridge(dispatch);\r\n  }\r\n\r\n  if (loading) return <div>로딩중..</div>;\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!bridges) return <button onClick={fetchData}>불러오기</button>;\r\n\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {bridges.map(bridge => (\r\n          <li\r\n            key={bridge.id}\r\n            onClick={() => setBridgeId(bridge.id)}\r\n            style={{ cursor: 'pointer' }}\r\n          >\r\n            {bridge.bridge_nm} ({bridge.bridge_index})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={fetchData}>다시 불러오기</button>\r\n      <button onClick={postData}>입력</button>\r\n      \r\n      {bridgeId && <Bridge id={bridgeId} /> }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Bridges;\r\n"]},"metadata":{},"sourceType":"module"}