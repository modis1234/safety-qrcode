{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\safety-qrcode\\\\src\\\\bridgesContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext } from \"react\";\nimport axios from \"axios\"; // 사용할 기본 상태\n\nconst initialState = {\n  bridge: {\n    loading: false,\n    data: null,\n    error: null\n  },\n  bridges: {\n    loading: false,\n    data: null,\n    error: null\n  }\n}; // 로딩중일 때 바뀔 상태 객체\n\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n}; // 성공했을 때의 상태 만들어주는 함수\n\nconst success = data => ({\n  loading: false,\n  data,\n  error: null\n}); // 실패했을 때의 상태 만들어주는 함수\n\n\nconst error = error => ({\n  loading: false,\n  data: null,\n  error: error\n}); // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n\n\nfunction bridgesReducer(state, action) {\n  switch (action.type) {\n    case \"GET_BRIDGES\":\n      return { ...state,\n        bridges: loadingState\n      };\n\n    case \"GET_BRIDGES_SUCCESS\":\n      return { ...state,\n        bridges: success(action.data)\n      };\n\n    case \"GET_BRIDGES_ERROR\":\n      return { ...state,\n        bridges: error(action.error)\n      };\n\n    case \"GET_BRIDGE\":\n      return { ...state,\n        bridge: loadingState\n      };\n\n    case \"GET_BRIDGE_SUCCESS\":\n      return { ...state,\n        bridge: success(action.data)\n      };\n\n    case \"GET_BRIDGE_ERROR\":\n      return { ...state,\n        bridge: error(action.error)\n      };\n\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n}\n\nconst BridgesStateContext = /*#__PURE__*/createContext(null);\nconst BridgesDispatchContext = /*#__PURE__*/createContext(null); // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n\nexport function BridgesProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(bridgesReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(BridgesStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(BridgesDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BridgesProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = BridgesProvider;\nexport function useBridgesState() {\n  _s2();\n\n  const state = useContext(BridgesStateContext);\n\n  if (!state) {\n    throw Error(`Cannot find BridsProvider`);\n  }\n\n  return state;\n}\n\n_s2(useBridgesState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useBridgesDispatch() {\n  _s3();\n\n  const dispatch = useContext(BridgesDispatchContext);\n\n  if (!dispatch) {\n    throw Error(`Cannot find BridsProvider`);\n  }\n\n  return dispatch;\n}\n\n_s3(useBridgesDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport async function getBridges(dispatch) {\n  dispatch({\n    type: \"GET_BRIDES\"\n  });\n\n  try {\n    const response = await axios.get(\"http://127.0.0.1:3001/bridge/bridges\");\n    dispatch({\n      type: \"GET_BRIDGES_SUCCESS\",\n      data: response\n    });\n  } catch (e) {\n    dispatch({\n      type: \"GET_BRIDGES_ERROR\",\n      error: e\n    });\n  }\n}\nexport async function getBridg(dispatch, id) {\n  dispatch({\n    type: \"GET_BRIDE\"\n  });\n\n  try {\n    const response = await axios.get(`http://127.0.0.1:3001/bridge/bridges/${id}`);\n    dispatch({\n      type: \"GET_BRIDGE_SUCCESS\",\n      data: response\n    });\n  } catch (e) {\n    dispatch({\n      type: \"GET_BRIDGE_ERROR\",\n      error: e\n    });\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"BridgesProvider\");","map":{"version":3,"sources":["D:/dev/safety-qrcode/src/bridgesContext.js"],"names":["React","createContext","useReducer","useContext","axios","initialState","bridge","loading","data","error","bridges","loadingState","success","bridgesReducer","state","action","type","Error","BridgesStateContext","BridgesDispatchContext","BridgesProvider","children","dispatch","useBridgesState","useBridgesDispatch","getBridges","response","get","e","getBridg","id"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// 사용할 기본 상태\r\nconst initialState = {\r\n  bridge: {\r\n    loading: false,\r\n    data: null,\r\n    error: null,\r\n  },\r\n  bridges: {\r\n    loading: false,\r\n    data: null,\r\n    error: null,\r\n  },\r\n};\r\n\r\n// 로딩중일 때 바뀔 상태 객체\r\nconst loadingState = {\r\n  loading: true,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\n// 성공했을 때의 상태 만들어주는 함수\r\nconst success = (data) => ({\r\n  loading: false,\r\n  data,\r\n  error: null,\r\n});\r\n\r\n// 실패했을 때의 상태 만들어주는 함수\r\nconst error = (error) => ({\r\n  loading: false,\r\n  data: null,\r\n  error: error,\r\n});\r\n\r\n// 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\r\nfunction bridgesReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"GET_BRIDGES\":\r\n      return {\r\n        ...state,\r\n        bridges: loadingState,\r\n      };\r\n    case \"GET_BRIDGES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        bridges: success(action.data),\r\n      };\r\n    case \"GET_BRIDGES_ERROR\":\r\n      return {\r\n        ...state,\r\n        bridges: error(action.error),\r\n      };\r\n    case \"GET_BRIDGE\":\r\n      return {\r\n        ...state,\r\n        bridge: loadingState,\r\n      };\r\n    case \"GET_BRIDGE_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        bridge: success(action.data),\r\n      };\r\n    case \"GET_BRIDGE_ERROR\":\r\n      return {\r\n        ...state,\r\n        bridge: error(action.error),\r\n      };\r\n    default:\r\n      throw new Error(`Unhanded action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst BridgesStateContext = createContext(null);\r\nconst BridgesDispatchContext = createContext(null);\r\n\r\n// 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\r\nexport function BridgesProvider({ children }) {\r\n  const [state, dispatch] = useReducer(bridgesReducer, initialState);\r\n\r\n  return (\r\n    <BridgesStateContext.Provider value={state}>\r\n      <BridgesDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </BridgesDispatchContext.Provider>\r\n    </BridgesStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useBridgesState() {\r\n  const state = useContext(BridgesStateContext);\r\n  if (!state) {\r\n    throw Error(`Cannot find BridsProvider`);\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function useBridgesDispatch() {\r\n  const dispatch = useContext(BridgesDispatchContext);\r\n  if (!dispatch) {\r\n    throw Error(`Cannot find BridsProvider`);\r\n  }\r\n  return dispatch;\r\n}\r\n\r\nexport async function getBridges(dispatch) {\r\n  dispatch({ type: \"GET_BRIDES\" });\r\n  try {\r\n    const response = await axios.get(\r\n        \"http://127.0.0.1:3001/bridge/bridges\"\r\n    );\r\n    dispatch({ type: \"GET_BRIDGES_SUCCESS\", data: response });\r\n  } catch (e) {\r\n    dispatch({ type: \"GET_BRIDGES_ERROR\", error: e });\r\n  }\r\n}\r\nexport async function getBridg(dispatch, id) {\r\n  dispatch({ type: \"GET_BRIDE\" });\r\n  try {\r\n    const response = await axios.get(\r\n        `http://127.0.0.1:3001/bridge/bridges/${id}`\r\n    );\r\n    dispatch({ type: \"GET_BRIDGE_SUCCESS\", data: response });\r\n  } catch (e) {\r\n    dispatch({ type: \"GET_BRIDGE_ERROR\", error: e });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}