{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\safety-qrcode\\\\src\\\\context\\\\BridgesContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext } from \"react\";\nimport { createAsyncDispatcher, initialAsyncState, createAsyncHandler } from \"../uitils/asyncActionUtils\";\nimport * as api from \"../uitils/api\"; // UsersContext 에서 사용 할 기본 상태\n\nconst initialState = {\n  bridges: initialAsyncState,\n  bridge: initialAsyncState\n};\nconst bridgesHandler = createAsyncHandler(\"GET_BRIDGES\", \"bridges\"); //const bridgeHandler = createAsyncHandler(\"GET_BRIDGE\", \"bridge\");\n\n/**\r\n * bridge/FINDBYALL\r\n * bridge/FINDBYID\r\n * bridge/POST\r\n * bridge/PUT\r\n * bridge/DELETE\r\n * bridge/SUCCESS\r\n * bridge/DELETE\r\n */\n// 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n\nfunction bridgesReducer(state, action) {\n  switch (action.type) {\n    case \"bridge/FINDBYALL\":\n    case \"bridge/FINDBYID\":\n    case \"bridge/SUCCESS\":\n    case \"bridge/ERROR\":\n      return bridgesHandler(state, action);\n\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n} // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n\n\nconst BridgesStateContext = /*#__PURE__*/createContext(null);\nconst BridgesDispatchContext = /*#__PURE__*/createContext(null); // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n\nexport function BridgesProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(bridgesReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(BridgesStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(BridgesDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n} // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n\n_s(BridgesProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = BridgesProvider;\nexport function useBridgesState() {\n  _s2();\n\n  const state = useContext(BridgesStateContext);\n\n  if (!state) {\n    throw new Error(\"Cannot find BridgesProvider\");\n  }\n\n  return state;\n} // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n\n_s2(useBridgesState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useBridgesDispatch() {\n  _s3();\n\n  const dispatch = useContext(BridgesDispatchContext);\n\n  if (!dispatch) {\n    throw new Error(\"Cannot find BridgesProvider\");\n  }\n\n  return dispatch;\n}\n\n_s3(useBridgesDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport const getBridges = createAsyncDispatcher(\"GET_BRIDGES\", api.getBridges); //export const getBridge = createAsyncDispatcher(\"GET_BRIDGE\", api.getBridge);\n\nvar _c;\n\n$RefreshReg$(_c, \"BridgesProvider\");","map":{"version":3,"sources":["D:/dev/safety-qrcode/src/context/BridgesContext.js"],"names":["React","createContext","useReducer","useContext","createAsyncDispatcher","initialAsyncState","createAsyncHandler","api","initialState","bridges","bridge","bridgesHandler","bridgesReducer","state","action","type","Error","BridgesStateContext","BridgesDispatchContext","BridgesProvider","children","dispatch","useBridgesState","useBridgesDispatch","getBridges"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,SACEC,qBADF,EAEEC,iBAFF,EAGEC,kBAHF,QAIO,4BAJP;AAKA,OAAO,KAAKC,GAAZ,MAAqB,eAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAEJ,iBADU;AAEnBK,EAAAA,MAAM,EAAEL;AAFW,CAArB;AAKA,MAAMM,cAAc,GAAGL,kBAAkB,CAAC,aAAD,EAAgB,SAAhB,CAAzC,C,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,SAASM,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACA,SAAK,iBAAL;AACA,SAAK,gBAAL;AACA,SAAK,cAAL;AACE,aAAOJ,cAAc,CAACE,KAAD,EAAQC,MAAR,CAArB;;AACF;AACE,YAAM,IAAIE,KAAJ,CAAW,yBAAwBF,MAAM,CAACC,IAAK,EAA/C,CAAN;AAPJ;AASD,C,CAED;;;AACA,MAAME,mBAAmB,gBAAGhB,aAAa,CAAC,IAAD,CAAzC;AACA,MAAMiB,sBAAsB,gBAAGjB,aAAa,CAAC,IAAD,CAA5C,C,CAEA;;AACA,OAAO,SAASkB,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAAA;;AAC5C,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBnB,UAAU,CAACU,cAAD,EAAiBJ,YAAjB,CAApC;AAEA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEK,KAArC;AAAA,2BACE,QAAC,sBAAD,CAAwB,QAAxB;AAAiC,MAAA,KAAK,EAAEQ,QAAxC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;;GAZgBD,e;;KAAAA,e;AAahB,OAAO,SAASG,eAAT,GAA2B;AAAA;;AAChC,QAAMT,KAAK,GAAGV,UAAU,CAACc,mBAAD,CAAxB;;AACA,MAAI,CAACJ,KAAL,EAAY;AACV,UAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAOH,KAAP;AACD,C,CAED;;IARgBS,e;;AAShB,OAAO,SAASC,kBAAT,GAA8B;AAAA;;AACnC,QAAMF,QAAQ,GAAGlB,UAAU,CAACe,sBAAD,CAA3B;;AACA,MAAI,CAACG,QAAL,EAAe;AACb,UAAM,IAAIL,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAOK,QAAP;AACD;;IANeE,kB;;AAShB,OAAO,MAAMC,UAAU,GAAGpB,qBAAqB,CAAC,aAAD,EAAgBG,GAAG,CAACiB,UAApB,CAAxC,C,CACP","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\r\nimport {\r\n  createAsyncDispatcher,\r\n  initialAsyncState,\r\n  createAsyncHandler,\r\n} from \"../uitils/asyncActionUtils\";\r\nimport * as api from \"../uitils/api\";\r\n\r\n// UsersContext 에서 사용 할 기본 상태\r\nconst initialState = {\r\n  bridges: initialAsyncState,\r\n  bridge: initialAsyncState,\r\n};\r\n\r\nconst bridgesHandler = createAsyncHandler(\"GET_BRIDGES\", \"bridges\");\r\n//const bridgeHandler = createAsyncHandler(\"GET_BRIDGE\", \"bridge\");\r\n\r\n/**\r\n * bridge/FINDBYALL\r\n * bridge/FINDBYID\r\n * bridge/POST\r\n * bridge/PUT\r\n * bridge/DELETE\r\n * bridge/SUCCESS\r\n * bridge/DELETE\r\n */\r\n\r\n\r\n// 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\r\nfunction bridgesReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"bridge/FINDBYALL\":\r\n    case \"bridge/FINDBYID\":\r\n    case \"bridge/SUCCESS\":\r\n    case \"bridge/ERROR\":\r\n      return bridgesHandler(state, action);\r\n    default:\r\n      throw new Error(`Unhanded action type: ${action.type}`);\r\n  }\r\n}\r\n\r\n// State 용 Context 와 Dispatch 용 Context 따로 만들어주기\r\nconst BridgesStateContext = createContext(null);\r\nconst BridgesDispatchContext = createContext(null);\r\n\r\n// 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\r\nexport function BridgesProvider({ children }) {\r\n  const [state, dispatch] = useReducer(bridgesReducer, initialState);\r\n\r\n  return (\r\n    <BridgesStateContext.Provider value={state}>\r\n      <BridgesDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </BridgesDispatchContext.Provider>\r\n    </BridgesStateContext.Provider>\r\n  );\r\n}\r\n\r\n// State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\r\nexport function useBridgesState() {\r\n  const state = useContext(BridgesStateContext);\r\n  if (!state) {\r\n    throw new Error(\"Cannot find BridgesProvider\");\r\n  }\r\n  return state;\r\n}\r\n\r\n// Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\r\nexport function useBridgesDispatch() {\r\n  const dispatch = useContext(BridgesDispatchContext);\r\n  if (!dispatch) {\r\n    throw new Error(\"Cannot find BridgesProvider\");\r\n  }\r\n  return dispatch;\r\n}\r\n\r\n\r\nexport const getBridges = createAsyncDispatcher(\"GET_BRIDGES\", api.getBridges);\r\n//export const getBridge = createAsyncDispatcher(\"GET_BRIDGE\", api.getBridge);\r\n\r\n"]},"metadata":{},"sourceType":"module"}