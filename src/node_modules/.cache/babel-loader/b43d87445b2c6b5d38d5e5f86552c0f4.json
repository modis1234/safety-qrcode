{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\safety-qrcode\\\\src\\\\context\\\\BridgesContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext } from \"react\";\nimport { createAsyncDispatcher, initialAsyncState, createAsyncHandler } from \"../uitils/asyncActionUtils\";\nimport * as api from \"../uitils/api\"; // UsersContext 에서 사용 할 기본 상태\n\nconst initialState = {\n  bridges: initialAsyncState,\n  bridge: initialAsyncState\n};\nconst bridgesHandler = createAsyncHandler(\"GET_BRIDGES\", \"bridges\");\nconst bridgeHandler = createAsyncHandler(\"GET_BRIDGE\", \"bridge\"); // 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\n\nfunction bridgesReducer(state, action) {\n  switch (action.type) {\n    case \"GET_BRIDGES\":\n    case \"GET_BRIDGES_SUCCESS\":\n    case \"GET_BRIDGES_ERROR\":\n      return bridgesHandler(state, action);\n\n    case \"GET_BRIDGE\":\n    case \"GET_BRIDGE_SUCCESS\":\n    case \"GET_BRIDGE_ERROR\":\n      return bridgeHandler(state, action);\n\n    case \"POST_BRIDGE\":\n      console.log(action.data);\n      const stateData = state.bridges.data;\n      console.log(stateData);\n      const result = stateData.concat(action.data);\n      const stateBridges = state.bridges;\n      console.log(\"result-->\", result);\n      const inputData = { ...stateBridges,\n        data: result\n      };\n      console.log(\"inputData-->\", inputData);\n      const _state = { ...state,\n        bridges: inputData\n      };\n      state = _state;\n      return state;\n\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n} // State 용 Context 와 Dispatch 용 Context 따로 만들어주기\n\n\nconst BridgesStateContext = /*#__PURE__*/createContext(null);\nconst BridgesDispatchContext = /*#__PURE__*/createContext(null); // 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\n\nexport function BridgesProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(bridgesReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(BridgesStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(BridgesDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n} // State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\n\n_s(BridgesProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = BridgesProvider;\nexport function useBridgesState() {\n  _s2();\n\n  const state = useContext(BridgesStateContext);\n\n  if (!state) {\n    throw new Error(\"Cannot find BridgesProvider\");\n  }\n\n  return state;\n} // Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\n\n_s2(useBridgesState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useBridgesDispatch() {\n  _s3();\n\n  const dispatch = useContext(BridgesDispatchContext);\n\n  if (!dispatch) {\n    throw new Error(\"Cannot find BridgesProvider\");\n  }\n\n  return dispatch;\n}\n\n_s3(useBridgesDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport const getBridges = createAsyncDispatcher(\"GET_BRIDGES\", api.getBridges);\nexport const getBridge = createAsyncDispatcher(\"GET_BRIDGE\", api.getBridge);\nexport function postBridge(dispatch) {\n  const data = {\n    id: 35,\n    bridge_index: \"DSBR9999\",\n    bridge_nm: \"교량D\",\n    bulider_nm: \"두산건설(주)\",\n    code_index: null,\n    comm_seq: 1,\n    created_date: \"2020-12-31T08:21:19.000Z\",\n    developer_nm: \"한국도로공사\",\n    form: null,\n    location: \"본선 STA. 6+084.7~6+455.2\",\n    site_nm: \"고속도로 제14호 함양-울산선(함양-합천) 건설공사 제 3공구\",\n    spec: 371\n  };\n  dispatch({\n    type: \"POST_BRIDGE\",\n    data\n  }); // try {\n  //   const response = api.postBridge(data);\n  //   dispatch({ type: \"POST_BRIDGE\", data: response });\n  // } catch (e) {\n  //   dispatch({ type: \"GET_BRIDGES_ERROR\", error: e });\n  // }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"BridgesProvider\");","map":{"version":3,"sources":["D:/dev/safety-qrcode/src/context/BridgesContext.js"],"names":["React","createContext","useReducer","useContext","createAsyncDispatcher","initialAsyncState","createAsyncHandler","api","initialState","bridges","bridge","bridgesHandler","bridgeHandler","bridgesReducer","state","action","type","console","log","data","stateData","result","concat","stateBridges","inputData","_state","Error","BridgesStateContext","BridgesDispatchContext","BridgesProvider","children","dispatch","useBridgesState","useBridgesDispatch","getBridges","getBridge","postBridge","id","bridge_index","bridge_nm","bulider_nm","code_index","comm_seq","created_date","developer_nm","form","location","site_nm","spec"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,SACEC,qBADF,EAEEC,iBAFF,EAGEC,kBAHF,QAIO,4BAJP;AAKA,OAAO,KAAKC,GAAZ,MAAqB,eAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAEJ,iBADU;AAEnBK,EAAAA,MAAM,EAAEL;AAFW,CAArB;AAKA,MAAMM,cAAc,GAAGL,kBAAkB,CAAC,aAAD,EAAgB,SAAhB,CAAzC;AACA,MAAMM,aAAa,GAAGN,kBAAkB,CAAC,YAAD,EAAe,QAAf,CAAxC,C,CAEA;;AACA,SAASO,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACA,SAAK,qBAAL;AACA,SAAK,mBAAL;AACE,aAAOL,cAAc,CAACG,KAAD,EAAQC,MAAR,CAArB;;AACF,SAAK,YAAL;AACA,SAAK,oBAAL;AACA,SAAK,kBAAL;AACE,aAAOH,aAAa,CAACE,KAAD,EAAQC,MAAR,CAApB;;AACF,SAAK,aAAL;AACEE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,IAAnB;AACA,YAAMC,SAAS,GAAGN,KAAK,CAACL,OAAN,CAAcU,IAAhC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACA,YAAMC,MAAM,GAAGD,SAAS,CAACE,MAAV,CAAiBP,MAAM,CAACI,IAAxB,CAAf;AACA,YAAMI,YAAY,GAAGT,KAAK,CAACL,OAA3B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,MAAzB;AAEA,YAAMG,SAAS,GAAG,EAChB,GAAGD,YADa;AAEhBJ,QAAAA,IAAI,EAAEE;AAFU,OAAlB;AAIAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BM,SAA5B;AACA,YAAMC,MAAM,GAAG,EACb,GAAGX,KADU;AAEbL,QAAAA,OAAO,EAAEe;AAFI,OAAf;AAIAV,MAAAA,KAAK,GAAGW,MAAR;AACA,aAAOX,KAAP;;AACF;AACE,YAAM,IAAIY,KAAJ,CAAW,yBAAwBX,MAAM,CAACC,IAAK,EAA/C,CAAN;AA7BJ;AA+BD,C,CAED;;;AACA,MAAMW,mBAAmB,gBAAG1B,aAAa,CAAC,IAAD,CAAzC;AACA,MAAM2B,sBAAsB,gBAAG3B,aAAa,CAAC,IAAD,CAA5C,C,CAEA;;AACA,OAAO,SAAS4B,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAAA;;AAC5C,QAAM,CAAChB,KAAD,EAAQiB,QAAR,IAAoB7B,UAAU,CAACW,cAAD,EAAiBL,YAAjB,CAApC;AAEA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEM,KAArC;AAAA,2BACE,QAAC,sBAAD,CAAwB,QAAxB;AAAiC,MAAA,KAAK,EAAEiB,QAAxC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;;GAZgBD,e;;KAAAA,e;AAahB,OAAO,SAASG,eAAT,GAA2B;AAAA;;AAChC,QAAMlB,KAAK,GAAGX,UAAU,CAACwB,mBAAD,CAAxB;;AACA,MAAI,CAACb,KAAL,EAAY;AACV,UAAM,IAAIY,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAOZ,KAAP;AACD,C,CAED;;IARgBkB,e;;AAShB,OAAO,SAASC,kBAAT,GAA8B;AAAA;;AACnC,QAAMF,QAAQ,GAAG5B,UAAU,CAACyB,sBAAD,CAA3B;;AACA,MAAI,CAACG,QAAL,EAAe;AACb,UAAM,IAAIL,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAOK,QAAP;AACD;;IANeE,kB;;AAOhB,OAAO,MAAMC,UAAU,GAAG9B,qBAAqB,CAAC,aAAD,EAAgBG,GAAG,CAAC2B,UAApB,CAAxC;AACP,OAAO,MAAMC,SAAS,GAAG/B,qBAAqB,CAAC,YAAD,EAAeG,GAAG,CAAC4B,SAAnB,CAAvC;AAEP,OAAO,SAASC,UAAT,CAAoBL,QAApB,EAA8B;AACnC,QAAMZ,IAAI,GAAG;AACXkB,IAAAA,EAAE,EAAE,EADO;AAEXC,IAAAA,YAAY,EAAE,UAFH;AAGXC,IAAAA,SAAS,EAAE,KAHA;AAIXC,IAAAA,UAAU,EAAE,SAJD;AAKXC,IAAAA,UAAU,EAAE,IALD;AAMXC,IAAAA,QAAQ,EAAE,CANC;AAOXC,IAAAA,YAAY,EAAE,0BAPH;AAQXC,IAAAA,YAAY,EAAE,QARH;AASXC,IAAAA,IAAI,EAAE,IATK;AAUXC,IAAAA,QAAQ,EAAE,yBAVC;AAWXC,IAAAA,OAAO,EAAE,oCAXE;AAYXC,IAAAA,IAAI,EAAE;AAZK,GAAb;AAcAjB,EAAAA,QAAQ,CAAC;AAAEf,IAAAA,IAAI,EAAE,aAAR;AAAuBG,IAAAA;AAAvB,GAAD,CAAR,CAfmC,CAgBnC;AACA;AACA;AACA;AACA;AACA;AACD","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\r\nimport {\r\n  createAsyncDispatcher,\r\n  initialAsyncState,\r\n  createAsyncHandler,\r\n} from \"../uitils/asyncActionUtils\";\r\nimport * as api from \"../uitils/api\";\r\n\r\n// UsersContext 에서 사용 할 기본 상태\r\nconst initialState = {\r\n  bridges: initialAsyncState,\r\n  bridge: initialAsyncState,\r\n};\r\n\r\nconst bridgesHandler = createAsyncHandler(\"GET_BRIDGES\", \"bridges\");\r\nconst bridgeHandler = createAsyncHandler(\"GET_BRIDGE\", \"bridge\");\r\n\r\n// 위에서 만든 객체 / 유틸 함수들을 사용하여 리듀서 작성\r\nfunction bridgesReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"GET_BRIDGES\":\r\n    case \"GET_BRIDGES_SUCCESS\":\r\n    case \"GET_BRIDGES_ERROR\":\r\n      return bridgesHandler(state, action);\r\n    case \"GET_BRIDGE\":\r\n    case \"GET_BRIDGE_SUCCESS\":\r\n    case \"GET_BRIDGE_ERROR\":\r\n      return bridgeHandler(state, action);\r\n    case \"POST_BRIDGE\":\r\n      console.log(action.data);\r\n      const stateData = state.bridges.data;\r\n      console.log(stateData);\r\n      const result = stateData.concat(action.data);\r\n      const stateBridges = state.bridges;\r\n      console.log(\"result-->\", result);\r\n\r\n      const inputData = {\r\n        ...stateBridges,\r\n        data: result,\r\n      };\r\n      console.log(\"inputData-->\", inputData);\r\n      const _state = {\r\n        ...state,\r\n        bridges: inputData,\r\n      };\r\n      state = _state;\r\n      return state;\r\n    default:\r\n      throw new Error(`Unhanded action type: ${action.type}`);\r\n  }\r\n}\r\n\r\n// State 용 Context 와 Dispatch 용 Context 따로 만들어주기\r\nconst BridgesStateContext = createContext(null);\r\nconst BridgesDispatchContext = createContext(null);\r\n\r\n// 위에서 선언한 두가지 Context 들의 Provider 로 감싸주는 컴포넌트\r\nexport function BridgesProvider({ children }) {\r\n  const [state, dispatch] = useReducer(bridgesReducer, initialState);\r\n\r\n  return (\r\n    <BridgesStateContext.Provider value={state}>\r\n      <BridgesDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </BridgesDispatchContext.Provider>\r\n    </BridgesStateContext.Provider>\r\n  );\r\n}\r\n\r\n// State 를 쉽게 조회 할 수 있게 해주는 커스텀 Hook\r\nexport function useBridgesState() {\r\n  const state = useContext(BridgesStateContext);\r\n  if (!state) {\r\n    throw new Error(\"Cannot find BridgesProvider\");\r\n  }\r\n  return state;\r\n}\r\n\r\n// Dispatch 를 쉽게 사용 할 수 있게 해주는 커스텀 Hook\r\nexport function useBridgesDispatch() {\r\n  const dispatch = useContext(BridgesDispatchContext);\r\n  if (!dispatch) {\r\n    throw new Error(\"Cannot find BridgesProvider\");\r\n  }\r\n  return dispatch;\r\n}\r\nexport const getBridges = createAsyncDispatcher(\"GET_BRIDGES\", api.getBridges);\r\nexport const getBridge = createAsyncDispatcher(\"GET_BRIDGE\", api.getBridge);\r\n\r\nexport function postBridge(dispatch) {\r\n  const data = {\r\n    id: 35,\r\n    bridge_index: \"DSBR9999\",\r\n    bridge_nm: \"교량D\",\r\n    bulider_nm: \"두산건설(주)\",\r\n    code_index: null,\r\n    comm_seq: 1,\r\n    created_date: \"2020-12-31T08:21:19.000Z\",\r\n    developer_nm: \"한국도로공사\",\r\n    form: null,\r\n    location: \"본선 STA. 6+084.7~6+455.2\",\r\n    site_nm: \"고속도로 제14호 함양-울산선(함양-합천) 건설공사 제 3공구\",\r\n    spec: 371,\r\n  };\r\n  dispatch({ type: \"POST_BRIDGE\", data });\r\n  // try {\r\n  //   const response = api.postBridge(data);\r\n  //   dispatch({ type: \"POST_BRIDGE\", data: response });\r\n  // } catch (e) {\r\n  //   dispatch({ type: \"GET_BRIDGES_ERROR\", error: e });\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}